ahoyapi: v2
usage: Docker commands for development using ahoy.
commands:
  exec:
    usage: Run a command in the docker-compose cli service container.
    cmd: |
      all_args=$(echo "$@")
      first_arg=$(echo "$1")
      rest_args=$(echo "${@:2}")
      case $first_arg in
        *nginx*|*mariadb*|*cli*|*solr*)
          container=$first_arg
          args=" $rest_args"
          ;;
        *)
          container=cli
          args=" $all_args"
          ;;
      esac

      id=$(ahoy docker compose ps -q $container)
      if [ -t 0 ]; then
        # if the input is empty, then use a tty session
        docker exec -it $id sh -c "$command $args"
      else
        # if the input is not empty, then don't use tty
        docker exec -i $id sh -c "$command $args"
      fi

  mysql:
    usage: Connect to the default mysql database as the root user.
    cmd: "docker exec -it $(ahoy docker compose ps -q cli) bash -c 'mysql -uroot -p$DB_ENV_MYSQL_ROOT_PASSWORD -h db $DB_ENV_MYSQL_DATABASE'"

  compose:
    usage: Abstraction for docker-compose
    cmd: docker-compose "$@"

  url:
    usage: Prints the project URL
    cmd: |
      echo "http://127.0.0.1:`ahoy docker compose port nginx 80|cut -d ':' -f2`"

  share-url:
    usage: Prints the project share URL
    cmd: |
      echo "http://127.0.0.1:`ahoy docker compose port share 4040|cut -d ':' -f2`"

  varnish-url:
    usage: Prints the project varnish URL
    cmd: |
      echo "http://127.0.0.1:`ahoy docker compose port varnish 80|cut -d ':' -f2`"

  surl:
    usage: Prints a secure project URL
    cmd: |
      echo "https://127.0.0.1:`ahoy docker compose port nginx 443|cut -d ':' -f2`"

  cleanup:
    usage: Clean ups docker unused images and volumes. See http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/.
    cmd: |
      EXITED=`docker ps -a -q -f status=exited`
      DANGLING=`docker images -f "dangling=true" -q`
      if [ ! -z "$EXITED" ]
      then
        docker rm -v $EXITED
      fi
      if [ ! -z "$DANGLING" ]
      then
        docker rmi $DANGLING
      fi
      docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes

  log:
    usage: Target specific logs using tail -f.  Targets the error log by default.
    cmd: |
      args=$(echo "$@")
      case $args in
        access)
          ahoy docker exec nginx tail -f /var/log/nginx/access.log
          ;;
        error)
          ahoy docker exec nginx tail -f /var/log/nginx/error.log
          ;;
        *)
          ahoy docker exec nginx tail -f /var/log/nginx/error.log
          ;;
      esac

  help:
    usage: Print this help
    cmd: ahoy docker --help
